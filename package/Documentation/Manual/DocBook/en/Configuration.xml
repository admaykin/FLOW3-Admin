<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="fluid.configuration"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>Configuration</title>

  <para>There are Basically 2 Levels of Configurations</para>

  <para><orderedlist>
      <listitem>
        <para>Class/Model wide Configuration</para>
      </listitem>

      <listitem>
        <para>Property Configuration</para>
      </listitem>
    </orderedlist></para>

  <section>
    <title>Model Configuration</title>

    <section>
      <title>Autoadmin</title>

      <para>Enable the Admin Interface for a Model</para>

      <para><example>
          <title>Class Reflection</title>

          <para><programlisting>/**
 * A blog post
 * ...
 * @autoadmin
 */</programlisting></para>
        </example><example>
          <title>YAML</title>

          <para><programlisting>F3\Blog\Domain\Model\Post:
  autoadmin: true</programlisting></para>
        </example></para>
    </section>

    <section>
      <title>Group</title>

      <para>Specifiy a Group in which the Model will be Listed in the Menu. By
      Default the Models will be Sorted in Categories based on the Package
      name.</para>

      <para><example>
          <title>Class Reflection</title>

          <para><programlisting>/**
 * A blog post
 * ...
 * @autoadmin
 * @group Settings
 */</programlisting><example>
              <title>YAML</title>

              <para><programlisting>F3\Blog\Domain\Model\Post:
  autoadmin: true
  group: Settings</programlisting></para>
            </example></para>
        </example></para>

      <para><screenshot>
          <info>
            <title>Result</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="img/group.png"></imagedata>
            </imageobject>
          </mediaobject>
        </screenshot></para>
    </section>

    <section>
      <title>Set</title>

      <para>By Default all Properties will be in a General Fieldset called
      General in the Order in which they are listed in the Models class. You
      can override this by specifiying specific
      Set<parameter></parameter></para>

      <para><example>
          <title>Class Reflection</title>

          <para><programlisting>/**
 * A blog post
 * ...
 * @autoadmin
 * @set Main (title,content)
 * @set Extended Informations (linkTitle,date,author,image)
 */</programlisting></para>

          <example>
            <title>YAML</title>

            <para><programlisting>F3\Blog\Domain\Model\Post:
  autoadmin: true
    set:
      - Main (title,content)
      - Extended Informations (linkTitle,date,author,image)</programlisting></para>
          </example>
        </example><screenshot>
          <info>
            <title>Result</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="img/set.png"></imagedata>
            </imageobject>
          </mediaobject>
        </screenshot></para>
    </section>
  </section>

  <section>
    <title>Property Configuration</title>

    <section>
      <title>Label</title>

      <para>With this Tag you can set the Label for a Property which is by
      Default a CamelCased version of the propertyname</para>

      <para><example>
          <title>Class Reflection</title>

          <para><programlisting>/**
 * @var string
 * @label Post Title
 */
protected $title;</programlisting><example>
              <title>YAML</title>

              <para><programlisting>F3\Blog\Domain\Model\Post:
  properties:
    title: 
      label: Post Title</programlisting></para>

              <para><screenshot>
                  <info>
                    <title>Result</title>
                  </info>

                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="img/label.png"></imagedata>
                    </imageobject>
                  </mediaobject>
                </screenshot></para>
            </example></para>
        </example></para>
    </section>

    <section>
      <title>Widget</title>

      <para>Instead of the automatically Assigned Widget you can use this Tag
      to specify a specific Widget.</para>

      <para><example>
          <title>Class Reflection</title>

          <para><programlisting>/**
 * @var string
 * @widget TextArea
 */
protected $content;</programlisting><example>
              <title>YAML</title>

              <para><programlisting>F3\Blog\Domain\Model\Post:
  properties:
    content:
      widget: TextArea</programlisting></para>
            </example></para>
        </example><screenshot>
          <info>
            <title>Result</title>
          </info>

          <mediaobject>
            <imageobject>
              <imagedata fileref="img/widget-content-textarea.png"></imagedata>
            </imageobject>
          </mediaobject>
        </screenshot></para>
    </section>

    <section>
      <title>Ignore</title>

      <para>There are a number of Properties which have no use to be
      Administrated through a GUI. With the ignore Tag you can control the
      Visibility of the Property to the Admin Interface.</para>

      <section>
        <title>Ignore the Property Completely</title>

        <para><example>
            <title>Class Reflection</title>

            <para><programlisting>/**
 * @var string
 * @ignore
 */
protected $id;</programlisting></para>
          </example><example>
            <title>YAML</title>

            <para><programlisting>F3\Blog\Domain\Model\Post:
  properties:
    id:
      ignore: true</programlisting></para>
          </example></para>
      </section>

      <section>
        <title>Ignore the Property in specific Views</title>

        <para>In some cases you may just want to Ignore a Property in the List
        View because it just clutters the View</para>

        <para><example>
            <title>Class Reflection</title>

            <para><programlisting>/**
 * @var string
 * @ignore list,view
 */
protected $content;</programlisting><example>
                <title>YAML</title>

                <para><programlisting>F3\Blog\Domain\Model\Post:
  properties:
    content:
      ignore: list,view</programlisting></para>
              </example>This will Ignore the Property Content in the List and
            Single View</para>
          </example></para>
      </section>
    </section>

    <section>
      <title>Infotext</title>

      <para>For more Information about a Property aside from the Title you can
      provide an Infotext that will be shown beside/below the Input Widgets in
      the Create and Update Views</para>

      <para><example>
          <title>Class Reflection</title>

          <para><programlisting>/**
 * @var string
 * @infotext Please tell us who you are
 */
protexted $author;</programlisting></para>

          <para><example>
              <title>YAML</title>

              <para><programlisting>F3\Blog\Domain\Model\Post:
  properties:
    author:
      infotext: Please tell us who you are</programlisting><screenshot>
                  <info>
                    <title>Result</title>
                  </info>

                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="img/infotext-author.png"></imagedata>
                    </imageobject>
                  </mediaobject>
                </screenshot></para>
            </example></para>
        </example></para>
    </section>

    <section>
      <title>Class</title>

      <para>Adds one or more Classes to the Input Widget</para>

      <para><example>
          <title>Class Reflection</title>

          <para><programlisting>/**
 * @string
 * @class content
 */
protected $content;</programlisting><example>
              <title>YAML</title>

              <para><programlisting>F3\Blog\Domain\Modle\Post:
  properties:
    content:
      class: content</programlisting></para>
            </example></para>
        </example></para>
    </section>

    <section>
      <title>Validate</title>

      <para>Please Check the FLOW3 Documentation for the Validation
      rule:</para>

      <para>http://flow3.typo3.org/documentation/tutorials/getting-started/gettingstarted.validation/</para>
    </section>

    <section>
      <title>Title</title>

      <para>You can Specify any Property that can be Converted to a String as
      a Title to be used as a simple String Repesentation which is for example
      used in the Single and Multiple Relation Widget to Identify an Model
      Item</para>

      <para><example>
          <title>Class Reflection</title>

          <para><programlisting>/**
 * @var string
 * @title
 */
protected $title;</programlisting><example>
              <title>YAML</title>

              <para><programlisting>F3\Blog\Domain\Model\Post:
  properties:
    title:
      title: true</programlisting></para>
            </example></para>
        </example><note>
          <para>By Default the Admin Interface tries to Resolve an appropriate
          Title for the Model automatically. To do this the Following things
          will be tried:</para>

          <para><orderedlist>
              <listitem>
                <para>Does the Model Provide a __toString() Method</para>
              </listitem>

              <listitem>
                <para>Does one or more @title Tags exist</para>
              </listitem>

              <listitem>
                <para>Are there Properties Tagged as @identity which can be
                converted to String</para>
              </listitem>

              <listitem>
                <para>Is there a Property with the name "title" or
                "name"</para>
              </listitem>
            </orderedlist></para>

          <para>First thing that matches will be used in the Order
          specified</para>
        </note></para>
    </section>

    <section>
      <title>Filter</title>

      <para>By Tagging a Property with this Tag the Admin Interface will try
      to provide a Selectbox to Filter the List View by the Possible Values of
      this Property</para>

      <para><example>
          <title>Class Reflection</title>

          <para><programlisting>/**
 * @var string
 * @filter
 */
protected $author;</programlisting><example>
              <title>YAML</title>

              <para><programlisting>F3\Blog\Domain\Model\Blog:
  properties:
    author:
      filter: true</programlisting></para>
            </example></para>
        </example></para>
    </section>

    <section>
      <title>OptionsProvider</title>

      <para>The OptionsProvider takes care of the Preperation to create an
      Optionslist for the SingleRelation and MultipleRelation Widget.</para>

      <para><programlisting>/**
 * @var \SplObjectStorage&lt;\F3\Admin\Security\Policy&gt;
 * @optionsProvider \F3\Admin\OptionsProvider\PolicyOptionsProvider
 **/
protected $grant;</programlisting></para>
    </section>
  </section>
</chapter>
